// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Message.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__MESSAGE_HPP
#define FAST_DDS_GENERATED__MESSAGE_HPP

#include <cstdint>
#include <utility>
#include <vector>


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MESSAGE_SOURCE)
#define MESSAGE_DllAPI __declspec( dllexport )
#else
#define MESSAGE_DllAPI __declspec( dllimport )
#endif // MESSAGE_SOURCE
#else
#define MESSAGE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MESSAGE_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure Message defined by the user in the IDL file.
 * @ingroup Message
 */
class Message
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Message()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Message()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Message that will be copied.
     */
    eProsima_user_DllExport Message(
            const Message& x)
    {
                    m_x = x.m_x;

                    m_y = x.m_y;

                    m_type = x.m_type;

                    m_hit = x.m_hit;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Message that will be copied.
     */
    eProsima_user_DllExport Message(
            Message&& x) noexcept
    {
        m_x = std::move(x.m_x);
        m_y = std::move(x.m_y);
        m_type = x.m_type;
        m_hit = x.m_hit;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Message that will be copied.
     */
    eProsima_user_DllExport Message& operator =(
            const Message& x)
    {

                    m_x = x.m_x;

                    m_y = x.m_y;

                    m_type = x.m_type;

                    m_hit = x.m_hit;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Message that will be copied.
     */
    eProsima_user_DllExport Message& operator =(
            Message&& x) noexcept
    {

        m_x = std::move(x.m_x);
        m_y = std::move(x.m_y);
        m_type = x.m_type;
        m_hit = x.m_hit;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Message object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Message& x) const
    {
        return (m_x == x.m_x &&
           m_y == x.m_y &&
           m_type == x.m_type &&
           m_hit == x.m_hit);
    }

    /*!
     * @brief Comparison operator.
     * @param x Message object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Message& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member x
     * @param _x New value to be copied in member x
     */
    eProsima_user_DllExport void x(
            const std::vector<int16_t>& _x)
    {
        m_x = _x;
    }

    /*!
     * @brief This function moves the value in member x
     * @param _x New value to be moved in member x
     */
    eProsima_user_DllExport void x(
            std::vector<int16_t>&& _x)
    {
        m_x = std::move(_x);
    }

    /*!
     * @brief This function returns a constant reference to member x
     * @return Constant reference to member x
     */
    eProsima_user_DllExport const std::vector<int16_t>& x() const
    {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport std::vector<int16_t>& x()
    {
        return m_x;
    }


    /*!
     * @brief This function copies the value in member y
     * @param _y New value to be copied in member y
     */
    eProsima_user_DllExport void y(
            const std::vector<int16_t>& _y)
    {
        m_y = _y;
    }

    /*!
     * @brief This function moves the value in member y
     * @param _y New value to be moved in member y
     */
    eProsima_user_DllExport void y(
            std::vector<int16_t>&& _y)
    {
        m_y = std::move(_y);
    }

    /*!
     * @brief This function returns a constant reference to member y
     * @return Constant reference to member y
     */
    eProsima_user_DllExport const std::vector<int16_t>& y() const
    {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport std::vector<int16_t>& y()
    {
        return m_y;
    }


    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    eProsima_user_DllExport void type(
            char _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    eProsima_user_DllExport char type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    eProsima_user_DllExport char& type()
    {
        return m_type;
    }


    /*!
     * @brief This function sets a value in member hit
     * @param _hit New value for member hit
     */
    eProsima_user_DllExport void hit(
            bool _hit)
    {
        m_hit = _hit;
    }

    /*!
     * @brief This function returns the value of member hit
     * @return Value of member hit
     */
    eProsima_user_DllExport bool hit() const
    {
        return m_hit;
    }

    /*!
     * @brief This function returns a reference to member hit
     * @return Reference to member hit
     */
    eProsima_user_DllExport bool& hit()
    {
        return m_hit;
    }



private:

    std::vector<int16_t> m_x;
    std::vector<int16_t> m_y;
    char m_type{0};
    bool m_hit{false};

};

#endif // _FAST_DDS_GENERATED_MESSAGE_HPP_


